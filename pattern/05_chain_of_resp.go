package pattern


 

type Calculator struct {
    result int
}

func (c *Calculator) Add(x int) *Calculator {
    c.result += x
    return c
}

func (c *Calculator) Subtract(x int) *Calculator {
    c.result -= x
    return c
}

func (c *Calculator) Result() int {
    return c.result
}

// пример вызова  result := calc.Add(5).Subtract(3).Add(10).Result() 

/*
	Паттерн "цепочка вызовов" (или "цепочка методов") является структурным паттерном проектирования, который используется для создания последовательной цепочки операций, где каждая операция выполняется над объектом, и результат этой операции становится входными данными для следующей операции. Этот паттерн также известен как "Method Chaining". Применяется он для улучшения читаемости кода и упрощения работы с объектами, предоставляя возможность вызывать несколько методов объекта в одной строке.

	Паттерн делает код более читаемым, поскольку каждый вызов метода добавляет ясность к тому, что происходит.
	Но цепочка методов может стать слишком длинной и трудной для понимания, если она неадекватно используется или если включает слишком много методов и может быть проблема с ограничением типов

*/
